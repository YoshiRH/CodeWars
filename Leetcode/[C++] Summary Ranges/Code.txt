class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
        vector<string> final;  //Vector of string for output
        int idx {0};           //int idx to start traversing the array

        while(idx < nums.size()){
            int beg, last;     //Two integers for storing the range of continuous elements
            beg = nums[idx];

            //Traverse the array beggining from current index & find the last element whose difference from previous element is exactly 1
            while(idx+1 < nums.size() && nums[idx+1] == nums[idx]+1){
                idx++;
            }
                last = nums[idx];

                // If continuous element isn't present...
                if(beg==last){
                    final.push_back(to_string(beg));
                }

                // If present...
                else{
                    final.push_back(to_string(beg) + "->" + to_string(last));
                }
                idx++;
                
        }
        return final;    // Return the output result list
    }
};